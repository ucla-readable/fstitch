diff -Nrud linux-2.6.15.7/fs/exec.c linux-2.6.15.7/fs/exec.c
--- linux-2.6.15.7/fs/exec.c	2006-03-27 23:06:28.000000000 -0800
+++ linux-2.6.15.7/fs/exec.c	2006-04-06 01:22:48.000000000 -0700
@@ -49,6 +49,7 @@
 #include <linux/rmap.h>
 #include <linux/acct.h>
 #include <linux/cn_proc.h>
+#include <linux/fsttich_proc.h>
 
 #include <asm/uaccess.h>
 #include <asm/mmu_context.h>
@@ -1092,6 +1093,7 @@
 				bprm->file = NULL;
 				current->did_exec = 1;
 				proc_exec_connector(current);
+				fsttich_exec_hook(current);
 				return retval;
 			}
 			read_lock(&binfmt_lock);
diff -Nrud linux-2.6.15.7/fs/Kconfig linux-2.6.15.7/fs/Kconfig
--- linux-2.6.15.7/fs/Kconfig	2006-03-27 23:06:28.000000000 -0800
+++ linux-2.6.15.7/fs/Kconfig	2006-04-06 22:26:48.000000000 -0700
@@ -4,6 +4,8 @@
 
 menu "File systems"
 
+source "fs/fsttich/Kconfig"
+
 config EXT2_FS
 	tristate "Second extended fs support"
 	help
diff -Nrud linux-2.6.15.7/fs/fsttich/Kconfig linux-2.6.15.7/fs/fsttich/Kconfig
--- linux-2.6.15.7/fs/fsttich/Kconfig	1969-12-31 16:00:00.000000000 -0800
+++ linux-2.6.15.7/fs/fsttich/Kconfig	2006-04-06 01:22:48.000000000 -0700
@@ -0,0 +1,5 @@
+config FSTITCH_PROC
+	boolean "Provide process event hooks for KudOS"
+	---help---
+	  This option provides hooks for the KudOS kernel module to find out
+          about process events, which it needs to support patchgroups.
diff -Nrud linux-2.6.15.7/fs/fsttich/fsttich_proc.c linux-2.6.15.7/fs/fsttich/fsttich_proc.c
--- linux-2.6.15.7/fs/fsttich/fsttich_proc.c	1969-12-31 16:00:00.000000000 -0800
+++ linux-2.6.15.7/fs/fsttich/fsttich_proc.c	2006-04-06 01:27:07.000000000 -0700
@@ -0,0 +1,102 @@
+/*
+ * fsttich_proc.c - provide process event hooks for KudOS
+ *
+ * Copyright (C) 2006 Regents of the University of California
+ * Based loosely on cn_proc.c by Matt Helsley
+ * 
+ * Copyright (C) 2005 Matt Helsley, IBM Corp.
+ * Based on cn_fork.c by Guillaume Thouvenin <guillaume.thouvenin@bull.net>
+ * Original copyright notice follows:
+ * Copyright (C) 2005 BULL SA.
+ *
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <asm/atomic.h>
+
+#include <linux/fsttich_proc.h>
+
+static atomic_t fsttich_module_loaded = ATOMIC_INIT(0);
+static spinlock_t fsttich_spinlock = SPIN_LOCK_UNLOCKED;
+static struct fsttich_proc_ops * fsttich_module = NULL;
+
+void fsttich_fork_hook(struct task_struct * task)
+{
+	if(atomic_read(&fsttich_module_loaded) < 1)
+		return;
+	
+	fsttich_module->fork(task);
+}
+
+void fsttich_exec_hook(struct task_struct * task)
+{
+	if(atomic_read(&fsttich_module_loaded) < 1)
+		return;
+	
+	fsttich_module->exec(task);
+}
+
+void fsttich_exit_hook(struct task_struct * task)
+{
+	if(atomic_read(&fsttich_module_loaded) < 1)
+		return;
+	
+	fsttich_module->exit(task);
+}
+
+int fsttich_register_module(struct fsttich_proc_ops * ops)
+{
+	spin_lock(&fsttich_spinlock);
+	
+	if(atomic_read(&fsttich_module_loaded) > 0)
+	{
+		spin_unlock(&fsttich_spinlock);
+		return -EBUSY;
+	}
+	
+	fsttich_module = ops;
+	
+	atomic_inc(&fsttich_module_loaded);
+	
+	spin_unlock(&fsttich_spinlock);
+	
+	return 0;
+}
+
+int fsttich_unregister_module(struct fsttich_proc_ops * ops)
+{
+	spin_lock(&fsttich_spinlock);
+	
+	if(atomic_read(&fsttich_module_loaded) < 1 || fsttich_module != ops)
+	{
+		spin_unlock(&fsttich_spinlock);
+		return -EINVAL;
+	}
+	
+	atomic_dec(&fsttich_module_loaded);
+	
+	fsttich_module = NULL;
+	
+	spin_unlock(&fsttich_spinlock);
+	
+	return 0;
+}
+
+EXPORT_SYMBOL(fsttich_register_module);
+EXPORT_SYMBOL(fsttich_unregister_module);
diff -Nrud linux-2.6.15.7/fs/fsttich/Makefile linux-2.6.15.7/fs/fsttich/Makefile
--- linux-2.6.15.7/fs/fsttich/Makefile	1969-12-31 16:00:00.000000000 -0800
+++ linux-2.6.15.7/fs/fsttich/Makefile	2006-04-06 01:22:48.000000000 -0700
@@ -0,0 +1 @@
+obj-$(CONFIG_FSTITCH_PROC)	+= fsttich_proc.o
diff -Nrud linux-2.6.15.7/fs/Makefile linux-2.6.15.7/fs/Makefile
--- linux-2.6.15.7/fs/Makefile	2006-03-27 23:06:28.000000000 -0800
+++ linux-2.6.15.7/fs/Makefile	2006-04-06 22:27:11.000000000 -0700
@@ -12,6 +12,8 @@
 		seq_file.o xattr.o libfs.o fs-writeback.o mpage.o direct-io.o \
 		ioprio.o pnode.o
 
+obj-$(CONFIG_FSTITCH_PROC)   += fsttich/
+
 obj-$(CONFIG_INOTIFY)		+= inotify.o
 obj-$(CONFIG_EPOLL)		+= eventpoll.o
 obj-$(CONFIG_COMPAT)		+= compat.o
diff -Nrud linux-2.6.15.7/include/linux/fsttich_proc.h linux-2.6.15.7/include/linux/fsttich_proc.h
--- linux-2.6.15.7/include/linux/fsttich_proc.h	1969-12-31 16:00:00.000000000 -0800
+++ linux-2.6.15.7/include/linux/fsttich_proc.h	2006-04-06 01:22:48.000000000 -0700
@@ -0,0 +1,61 @@
+/*
+ * fsttich_proc.h - provide process event hooks for KudOS
+ *
+ * Copyright (C) 2006 Regents of the University of California
+ * Based loosely on cn_proc.h by Matt Helsley
+ * 
+ * Copyright (C) Matt Helsley, IBM Corp. 2005
+ * Based on cn_fork.h by Nguyen Anh Quynh and Guillaume Thouvenin
+ * Original copyright notice follows:
+ * Copyright (C) 2005 Nguyen Anh Quynh <aquynh@gmail.com>
+ * Copyright (C) 2005 Guillaume Thouvenin <guillaume.thouvenin@bull.net>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ */
+
+#ifndef FSTITCH_PROC_H
+#define FSTITCH_PROC_H
+
+#include <linux/config.h>
+
+#ifdef __KERNEL__
+
+#ifdef CONFIG_FSTITCH_PROC
+
+struct task_struct;
+
+struct fsttich_proc_ops {
+	void (*fork)(struct task_struct * child);
+	void (*exec)(struct task_struct * process);
+	void (*exit)(struct task_struct * process);
+};
+
+void fsttich_fork_hook(struct task_struct * task);
+void fsttich_exec_hook(struct task_struct * task);
+void fsttich_exit_hook(struct task_struct * task);
+
+int fsttich_register_module(struct fsttich_proc_ops * ops);
+int fsttich_unregister_module(struct fsttich_proc_ops * ops);
+
+#else
+
+static inline void fsttich_fork_hook(struct task_struct * task) {}
+static inline void fsttich_exec_hook(struct task_struct * task) {}
+static inline void fsttich_exit_hook(struct task_struct * task) {}
+
+#endif	/* CONFIG_FSTITCH_PROC */
+
+#endif	/* __KERNEL__ */
+#endif	/* FSTITCH_PROC_H */
diff -Nrud linux-2.6.15.7/kernel/exit.c linux-2.6.15.7/kernel/exit.c
--- linux-2.6.15.7/kernel/exit.c	2006-03-27 23:06:28.000000000 -0800
+++ linux-2.6.15.7/kernel/exit.c	2006-04-06 01:22:48.000000000 -0700
@@ -29,6 +29,7 @@
 #include <linux/syscalls.h>
 #include <linux/signal.h>
 #include <linux/cn_proc.h>
+#include <linux/fsttich_proc.h>
 
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
@@ -865,6 +866,7 @@
 
 	tsk->exit_code = code;
 	proc_exit_connector(tsk);
+	fsttich_exit_hook(tsk);
 	exit_notify(tsk);
 #ifdef CONFIG_NUMA
 	mpol_free(tsk->mempolicy);
diff -Nrud linux-2.6.15.7/kernel/fork.c linux-2.6.15.7/kernel/fork.c
--- linux-2.6.15.7/kernel/fork.c	2006-03-27 23:06:28.000000000 -0800
+++ linux-2.6.15.7/kernel/fork.c	2006-04-06 01:22:48.000000000 -0700
@@ -43,6 +43,7 @@
 #include <linux/rmap.h>
 #include <linux/acct.h>
 #include <linux/cn_proc.h>
+#include <linux/fsttich_proc.h>
 
 #include <asm/pgtable.h>
 #include <asm/pgalloc.h>
@@ -1140,6 +1141,7 @@
 	total_forks++;
 	write_unlock_irq(&tasklist_lock);
 	proc_fork_connector(p);
+	fsttich_fork_hook(p);
 	cpuset_fork(p);
 	retval = 0;
 
