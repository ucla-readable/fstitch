#!/usr/bin/env perl

use File::Basename;
use Getopt::Std;

sub usage() {
	$basename = basename($0);
	print STDERR "Usage: $basename [-h] <-d TEST_DIR> <-t TEST_NAME>\n";
	exit(1);
}

sub svnversion() {
	my $dir = $_[0];
	open(R, "<$dir/svnversion") || die;
	while(<R>) {
		my $line = $_;
		$line =~ m/(\d+\:)?(\d+).*/;
		# Given a revision range, we probably care about the latest
		# since we may be testing an old kudos with updated bench scripts
		my $rev = $2;
		close(R);
		return $rev;
	}
	close(R);
	die;
}

my %opt;

getopts("hd:t:", \%opt) or usage();
usage() if $opt{h} || !defined $opt{d} || !defined $opt{t};

if (!-d "$opt{d}") {
	print STDERR "Test output directory does not exist ($opt{d})\n";
	exit(1);
}

my $testdir = $opt{d};
my $testname = $opt{t};

if (!-f "$testdir/$testname.run.0") {
	print STDERR "No $testname runs\n";
	exit(1);
}

my $user_hz = 100;

# track times for total
my %real = ("sum" => 0, "count" => 0, "min" => -1, "max" => 0);
my %sys = %real;
my %user = %real;
my %io = %real;

my %totals = ("real" => \%real, "sys" => \%sys, "user" => \%user, "io" => \%io);
my @totalsa = (\%real, \%sys, \%user, \%io);

sub updateStats {
	my $total = shift;
	my $time = shift;
	$total->{"sum"} += $time;
	$total->{"count"}++;
	$total->{"min"} = $time if ($time < $total->{"min"} || $total->{"min"} == -1);
	$total->{"max"} = $time if ($time > $total->{"max"});
}

sub extractRunStatsVersion0 {
	my $total_io = 0;
	my $state = 0;
	while(<R>) {
		my $line = $_;
		if ($state == 0) {
			if ($line =~ m/^\+ $testname$/) {
				$state = 1;
			} elsif ($line =~ m/^\+ sync$/) {
				$state = 2;
			} elsif ($line =~ m/^\+ total$/) {
				$state = 3;
			}
		} else {
			if ($line =~ m/^(real|user|sys)\s+(\d+)m(\d+\.\d+)s$/) {
				if ($state == 3) {
					my $time = $2 * 60 + $3;
					my $total = $totals{$1};
					if ($1 eq "real") {
						$total_io += $time;
					} else {
						$total_io -= $time;
					}
					updateStats($total, $time);
				}
				$state = 0 if $1 eq "sys";
			} elsif (! $line =~ m/\w+/) {
				print STDERR "Ignoring unexpected line \"$line\"\n";
			}
		}
	}
	updateStats(\%io, $total_io);
}

sub extractRunStatsVersion1 {
	my $total_before;
	while(<R>) {
		my $line = $_;
		if ($line =~ m/^total-before/) {
			$total_before = $line;
		} elsif ($line =~ m/^total-after/) {
			my $total_after = $line;
			# there is actually one more number in the cpu line. what is it?
			$total_before =~ m/cpu\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)/;
			my $user = $1 + $2;
			my $sys = $3;
			my $io = $4 + $5 + $6 + $7;

			$total_after =~ m/cpu\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)/;
			$user = ($1 + $2 - $user) / $user_hz;
			$sys = ($3 - $sys) / $user_hz;
			$io = ($4 + $5 + $6 + $7 - $io) / $user_hz;
			my $real = $user + $sys + $io;

			updateStats(\%user, $user);
			updateStats(\%sys, $sys);
			updateStats(\%io, $io);
			updateStats(\%real, $real);
		}
	}
}

my $logversion = (&svnversion($testdir) >= 3587);

foreach $run (<$testdir/$testname.run.*>) {
	open(R, "<$run") || die;
	if ($logversion == 0) {
		# NOTE: version 0 stats are not accurate
		extractRunStatsVersion0();
	} else {
		extractRunStatsVersion1();
	}
	close(R);
}

foreach $total (@totalsa) {
	my $avg = 0;
	$avg = $total->{"sum"} / $total->{"count"} if ($total->{"count"} != 0);
	printf "%.2f %.2f %.2f  ", $avg, $total->{"min"}, $total->{"max"};
}
print "\n";
