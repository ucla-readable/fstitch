# -*- mode: shell-script -*-

shopt -s extglob

# get the next test number
function get_test_num () {
	BASE=$1
	MAX=1000
	I=0
	while [ $I -lt $MAX ]; do
		[ `ls ${BASE}*.$I 2>/dev/null | wc -l` -eq 0 ] && break
		I=$((I + 1))
	done
	if [ $I -eq $MAX ]; then
		echo "All $MAX tests used?" 1>&2
		exit 1
	fi
	echo $I
}

# try to run args, or exit
function try () {
	echo "+ $@"
	"$@"
	R=$?
	if [ $R -ne 0 ]; then echo "FAILED ($R): $@"; exit 1; fi
}

# wait (a bit) for kkfsd to exit
function waitkkfsd () {
	MAX=10
	I=0
	while [ $I -lt $MAX ]; do
		ps -C kkfsd | grep -vq kkfsd && break
		sleep 0.5
		I=$((I + 1))
	done
	[ $I -eq $MAX ] && echo "kkfsd has not exited" 1>&2
	sleep 1 # try to wait for syslogd to log kkfsd exit output
}

# fsync after a test (both kudos and linux)
function fsync () {
	KUDOSDIR=$1
	MNT=$2
	$KUDOSDIR/obj/util/fsync $MNT
	sync
}

# prepare to run a test
function build () {
	T="$1"
	N="$2"
	KUDOSDIR="$3"
	HOST="$4"

	echo "* Start test $T ($N)"

	case "$HOST" in
		kudos)
			pushd $KUDOSDIR; try make; popd;;
		uu)
			pushd $KUDOSDIR; try make -f Makefile.user; popd;;
		linux)
			;;
		*)
			echo "Unsupported host \"$HOST\"" 1>&2; exit 1;;
	esac

	try sync
}

# start kernel logging
function log_kernel () {
	T=$1
	N=$2
	OUTDIR=$3
	HOST=$4

	if [ "$HOST" == "kudos" ] || [ "$HOST" == "linux" ]; then
		echo "+ tail /var/log/syslog"
		sudo tail -f -n 0 /var/log/syslog &>$OUTDIR/$T.sys.$N </dev/null &
		SYSTAIL=$!
		trap "echo + kill tail syslog; waitkkfsd; sudo kill $SYSTAIL" EXIT
	fi
}

# start kdb and block logging
function prepare_postinit () {
	T=$1
	N=$2
	OUTDIR=$3
	HOST=$4

	if [ "$HOST" == "kudos" ] && [ -f /proc/kkfsd_debug ]; then
		echo "+ sudo log /proc/kkfsd_debug"
		sudo cat /proc/kkfsd_debug &>$OUTDIR/$T.kdb.$N </dev/null &
		KDBCAT=$!
		sudo tail -f -n 1 /var/log/syslog 2>&1 </dev/null \
			| while read line; do
				echo "$line" | grep -q "Please kill /proc/kkfsd_debug"
				[ $? -eq 0 ] || continue
				sudo kill $KDBCAT
				break
			done &>/dev/null &
	fi

	if [ "$HOST" == "kudos" ] || [ "$HOST" == "linux" ] && zgrep -q BLK_DEV_IO_TRACE=y /proc/config.gz && [ -n "`which blktrace`" ]; then
		if ! mount | grep -q /debug; then
			sudo mount /debug
		fi
		if mount | grep -q /debug; then
			DEV=${DEV:-/dev/sdb}
			echo "+ blktrace"
			sudo blktrace -r /debug -d $DEV -o - >$OUTDIR/$T.blk.$N.blktrace.0 2>/dev/null </dev/null &
			BLKTRACE=$!
			sleep 1 # if blktrace will fail, it will probably fail within 1s
			if ! ps $BLKTRACE >/dev/null; then
				echo "blktrace failed" 1>&2
				exit 1
			fi
		fi
	fi
}

# post-test actions
function finish () {
	T=$1
	N=$2
	KUDOSDIR=$3
	OUTDIR=$4
	HOST=$5
	PROFILE=`lsmod | grep -q ^oprofile && echo 1 || echo 0`
	if [ $PROFILE -eq 1 ] && ([ "$HOST" == "kudos" ] || [ "$HOST" == "linux" ]); then
		grep -q idle=poll /proc/cmdline && TP=.2 || TP=1
		try sudo opreport -l -g -p $KUDOSDIR/kfs/ -t $TP | tee -a $OUTDIR/$T.oprof.$N
	fi
	if ps -C blktrace >/dev/null; then
		echo "+ kill blktrace"
		sudo killall blktrace
	fi
}

# Return whether "HOST-FS-CMODE" is supported
function supported_host_fs () {
	# note: the below case @() notation requires extglob
	case "$1" in
		@(kudos|uu)-ext2-@(su|meta|full|none)) true;;
		linux-@(ext2-none|ext3-@(ordered|journal))) true;;
		*) false;;
	esac
}

# Return canonical consistency mode given "HOST", "FS", and "CMODE"
function canonicalize_cmode () {
	HOST="$1"
	FS="$2"
	CMODE="$3"
	if [ -z "$CMODE" ]; then
		case "$HOST" in
			uu|kudos)
				case "$FS" in
					ext2) CMODE=su;;
					*) echo "Unsupported $HOST FS $FS"; exit 1;;
				esac
				;;
			linux)
				case "$FS" in
					ext2) CMODE=none;;
					ext3) CMODE=ordered;;
					*) echo "Unsupported linux FS $FS"; exit 1;;
				esac
				;;
			*) echo "Unsupported HOST $HOST"; exit 1;;
		esac
	fi
	echo "$CMODE"
}

# Run $2.. (and name it $1) and display time stats
function ktime () {
	local NAME="$1"
	shift
	echo "$NAME-before `head -1 /proc/stat`"
	echo "+ $@"
	"$@"
	R=$?
	echo "$NAME-after `head -1 /proc/stat`"
	return $R
}

KMNT=kfs:/
MNT=/mnt/test
