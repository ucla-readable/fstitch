
OBJDIRS += fs

FSOFILES := 		$(OBJDIR)/fs/ide.o \
			$(OBJDIR)/fs/fs.o \
			$(OBJDIR)/fs/serv.o \
			$(OBJDIR)/fs/test.o \

USERAPPS :=		$(OBJDIR)/user/bless \
			$(OBJDIR)/user/cat \
			$(OBJDIR)/user/clock \
			$(OBJDIR)/user/df \
			$(OBJDIR)/user/diskwrite \
			$(OBJDIR)/user/echo \
			$(OBJDIR)/user/es \
			$(OBJDIR)/user/fire \
			$(OBJDIR)/user/fourem \
			$(OBJDIR)/user/free \
			$(OBJDIR)/user/get \
			$(OBJDIR)/user/grep \
			$(OBJDIR)/user/hexdump \
			$(OBJDIR)/user/ifdown \
			$(OBJDIR)/user/ifup \
			$(OBJDIR)/user/init \
			$(OBJDIR)/user/int3 \
			$(OBJDIR)/user/josweb \
	 		$(OBJDIR)/kern/kernel \
			$(OBJDIR)/user/kfsgraph \
			$(OBJDIR)/user/ladybug \
			$(OBJDIR)/user/ls \
			$(OBJDIR)/user/lsfd \
			$(OBJDIR)/user/mario \
			$(OBJDIR)/user/mkdir \
			$(OBJDIR)/user/more \
			$(OBJDIR)/user/mv \
			$(OBJDIR)/user/netstats \
			$(OBJDIR)/user/null \
			$(OBJDIR)/user/pong \
			$(OBJDIR)/user/psb16 \
			$(OBJDIR)/user/reboot \
			$(OBJDIR)/user/rm \
			$(OBJDIR)/user/rmdir \
			$(OBJDIR)/user/sb16 \
			$(OBJDIR)/user/sh \
			$(OBJDIR)/user/sleep \
			$(OBJDIR)/user/sync \
			$(OBJDIR)/user/telnet \
			$(OBJDIR)/user/telnetd \
			$(OBJDIR)/user/testfpu \
			$(OBJDIR)/user/testkpl \
			$(OBJDIR)/user/uptime \
			$(OBJDIR)/user/volume

FSIMGTXTFILES :=	fs/.journal \
			fs/404.html \
			fs/favicon.ico \
			fs/goomba.spr \
			fs/index.html \
			fs/init.sh \
			fs/kbear.jpg \
			fs/kfsgraphviz.sh \
			fs/kudos.0 \
			fs/lady.img \
			fs/lady.jpeg \
			fs/lady.pal \
			fs/lorem \
			fs/mario.pal \
			fs/mario.spr \
			fs/motd \
			fs/winamp.0

-include fs/audio/Makefrag

FSIMGFILES := $(FSIMGTXTFILES) $(USERAPPS)

$(OBJDIR)/fs/fs: $(FSOFILES) $(OBJDIR)/user/entry.o $(OBJDIR)/user/libuser.a
	@echo + ld $@
	$(V)mkdir -p $(@D)
	$(V)echo "" > $(SYMTBL)
	$(V)echo "" > $(SYMSTRTBL)
	$(V)$(LD) -o $@ $(ULDFLAGS) $(LDFLAGS) -nostdlib \
		$(OBJDIR)/user/entry.o $(FSOFILES) \
		-L$(OBJDIR)/user -luser $(GCC_LIB) \
		 -b binary $(SYMTBL) $(SYMSTRTBL)
	$(V)$(OBJDIR)/util/$(ELFDUMP_SYMTAB) -sym $@ > $(SYMTBL)
	$(V)$(OBJDIR)/util/$(ELFDUMP_SYMTAB) -symstr $@ > $(SYMSTRTBL)
	$(V)# We assume here that running ld this second time does not change what
	$(V)# the elf symtable/strtable holds. TODO: is this a safe assumption?
	$(V)$(LD) -o $@ $(ULDFLAGS) $(LDFLAGS) -nostdlib \
		$(OBJDIR)/user/entry.o $(FSOFILES) \
		-L$(OBJDIR)/user -luser $(GCC_LIB) \
		 -b binary $(SYMTBL) $(SYMSTRTBL)
	$(V)$(OBJDUMP) -S $@ >$@.asm
	$(V)$(STRIP) $@

# How to build the file system image
$(OBJDIR)/fs/fsformat: fs/fsformat.c
	@echo + mk $(OBJDIR)/fs/fsformat
	$(V)mkdir -p $(@D)
	$(V)$(NCC) $(USER_CFLAGS) -o $(OBJDIR)/fs/fsformat fs/fsformat.c

$(OBJDIR)/fs/bdsplit: fs/bdsplit.c
	@echo + mk $(OBJDIR)/fs/bdsplit
	$(V)mkdir -p $(@D)
	$(V)$(NCC) $(USER_CFLAGS) -o $(OBJDIR)/fs/bdsplit fs/bdsplit.c

include conf/fs.mk
ifndef FSSIZE
	FSINUSE := \`du -slLc --block-size=4096 $(OBJDIR)/kern/kernel $(FSIMGFILES) | grep total$$ | awk '{print $$1}'\`
	FSSIZE := `echo $$((($(FSINUSE) + 255) / 256 + $(FSFREE)))`
endif

$(OBJDIR)/fs/clean-fs.img: $(OBJDIR)/fs/fsformat $(FSIMGFILES) $(OBJDIR)/boot/boot $(OBJDIR)/boot/stage2
	@echo + mk $(OBJDIR)/fs/clean-fs.img \($(FSSIZE)M\)
	$(V)mkdir -p $(@D)
	$(V)dd if=/dev/zero of=$(OBJDIR)/fs/clean-fs.img bs=1M count=$(FSSIZE) 2>/dev/null
	$(V)$(OBJDIR)/fs/fsformat $(OBJDIR)/fs/clean-fs.img $(FSIMGFILES)
	$(V)dd if=$(OBJDIR)/boot/boot of=$(OBJDIR)/fs/clean-fs.img conv=notrunc 2>/dev/null
	$(V)dd if=$(OBJDIR)/boot/stage2 of=$(OBJDIR)/fs/clean-fs.img seek=1 count=7 conv=notrunc 2>/dev/null

$(OBJDIR)/fs/fs.img: $(OBJDIR)/fs/clean-fs.img
	@echo + cp $(OBJDIR)/fs/clean-fs.img $@
	$(V)cp $(OBJDIR)/fs/clean-fs.img $@

fs/.journal:
	@echo + dd if=/dev/zero of=fs/.journal
	$(V)dd if=/dev/zero of=fs/.journal bs=1M count=4 2>/dev/null

all: $(OBJDIR)/fs/fs.img

#all: $(addsuffix .sym, $(USERAPPS))

#all: $(addsuffix .asm, $(USERAPPS))

